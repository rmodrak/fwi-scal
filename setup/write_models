#!/usr/bin/env python

import json
import numpy as np

from os.path import join
from scipy.interpolate import griddata

HOME = '/users/rmodrak'

def fullpath(path):
    return join(HOME, 'devel', 'scal', path)


def write_header(filename, xmin,ymin,zmin,xmax,ymax,zmax,nx,ny,nz,
    vpmin,vpmax,vsmin,vsmax,rhomin,rhomax):

    with open(filename, 'w') as file:
        file.write('%e %e %e %e %e %e\n' % (xmin,ymin,zmin,xmax,ymax,zmax))
        file.write('%e %e %e\n' % ((xmax-xmin)/(nx-1), (ymax-ymin)/(ny-1), (zmax-zmin)/(nz-1)))
        file.write('%d %d %d\n' % (nx,ny,nz))
        file.write('%.2e %.2e %.2e %.0f %.0f %.0f\n' % (vpmin,vpmax,vsmin,vsmax,rhomin,rhomax))


def _write(filename, array):
    """ Writes Fortran style binary files--data are written as single precision
        floating point numbers
    """
    header = footer = np.array([4*len(array)], dtype='int32')
    array = np.array(array, dtype='float32')

    with open(filename, 'wb') as file:
        header.tofile(file)
        array.tofile(file)
        footer.tofile(file)


def rescale(x,xmin,xmax,y,ymin,ymax):

    x -= x.min()
    x *= (xmax-xmin)/x.max()
    x += xmin

    y -= y.min()
    y *= (ymax-ymin)/y.max()
    y += ymin

    return x,y


def write_fortran(dirname, tofile):

    names = [
        'x',
        'z',
        'rho',
        'vp',
        'vs',
    ]

    for _i in range(5):
        filename = join(dirname, 'proc000000_%s.bin' % names[_i])
        _write(filename, tofile[:, _i])


if __name__=="__main__":
    """ Writes SCAL models
    """
    filename = "scal.json"
    with open(filename, "r") as file:
       coords  = json.load(file)
    print(coords)


    for key,val in coords.items():
        print('populating %s' % key)
        globals()[key] = val


    #
    # write 2D homogeneous model
    #
    print('')
    print('Writing 2D homogeneous model')
    print('')

    filename = '/users/rmodrak/data/examples-2d/checkers/model_init_ascii'
    fromfile = np.loadtxt(filename)

    x = fromfile[:,0]
    y = fromfile[:,1]

    tofile = fromfile
    tofile[:,0], tofile[:,1] = rescale(
        x, xmin, xmax,
        y, ymin, ymax)

    filename = fullpath('2d/simple-coordinate-system/specfem2d-d745c542/model_homogeneous_ascii')
    np.savetxt(filename, tofile)

    dirname = fullpath('2d/simple-coordinate-system/specfem2d-d745c542/model_homogeneous/')
    write_fortran(dirname, tofile)


    #
    # write 2D coarse checkerboard model
    #
    print('')
    print('Writing 2D coarse checkerboard')
    print('')

    filename = '/users/rmodrak/data/examples-2d/checkers/model_true_ascii'
    fromfile = np.loadtxt(filename)

    x = fromfile[:,0]
    y = fromfile[:,1]

    tofile = fromfile
    tofile[:,0], tofile[:,1] = rescale(
        x, xmin, xmax,
        y, ymin, ymax)

    filename = fullpath('2d/simple-coordinate-system/specfem2d-d745c542/model_coarse_ascii')
    np.savetxt(filename, tofile)

    dirname = fullpath('2d/simple-coordinate-system/specfem2d-d745c542/model_coarse/')
    write_fortran(dirname, tofile)


    #
    # write 3D coarse checkerboard model
    #
    print('')
    print('Writing 3D coarse checkerboard')
    print('')

    filename = '/users/rmodrak/data/examples-2d/checkers/model_true_ascii'
    fromfile = np.loadtxt(filename)

    xgll = fromfile[:,0]
    ygll = fromfile[:,1]
    vgll = fromfile[:,4]

    xgll, ygll = rescale(
        xgll, xmin, xmax,
        ygll, ymin, ymax)

    nx = ny = 75
    nz = 10

    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymin, ymax, ny)
    z = np.linspace(zmin, zmax, nz)

    # this ordering results in Z slow, y fast, x, fastest
    Y,Z,X = np.meshgrid(y,z,x)

    X = X.flatten()
    Y = Y.flatten()
    Z = Z.flatten()

    VS = griddata((xgll,ygll), vgll,
                  (X,Y), 'nearest')

    VP = np.sqrt(3.)*VS
    RHO = np.tile(2600., nx*ny*nz)

    minmax = [VP.min(), VP.max(), VS.min(), VS.max(), RHO.min(), RHO.max()]
    

    filename = fullpath('3d/simple-coordinate-system/models_xyz/coarse/model_noheader')
    np.savetxt(filename, np.column_stack((X,Y,Z,VP,VS,RHO)), fmt='%.2e %.2e %.2e %.0f %.0f %.0f')


    filename = fullpath('3d/simple-coordinate-system/models_xyz/coarse/header')
    write_header(filename, xmin,ymin,zmin,xmax,ymax,zmax,nx,ny,nz, *minmax)


    print('To finish writing SPECFEM3D models, adjust min/max values in header, then:\n\n'
          'MODELDIR="%s"; cat $MODELDIR/header $MODELDIR/model_noheader > $MODELDIR/tomography_model.xyz\n' % fullpath('3d/simple-coordinate-system/models_xyz/coarse'))

    #print('')
    #print('Writing 3D model fine')
    #print('')

